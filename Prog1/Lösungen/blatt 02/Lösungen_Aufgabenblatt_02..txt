Autoren: Lyuba Dimitrova, Martina Brauchler

5)

a)	Die Einwohner der Stadt Heidelberg sind 156 267 (12/2015)              
	Im Durchschnitt macht jeder von Ihnen ungefähr 10 Fotos pro Tag
    	Ein Foto ist ungefähr 3MB groß
    	156267*10*3 = 4688010MB ~= 4578GB ~= 4.5TB


	Heidelberg besuchen 11,9 Mio. Touristen jährlich (2014)
	Dann pro Tag 11900000/365 ~= 32603
	Im Durchschnitt macht jeder von Ihnen täglich 200 Fotos
	Ein Foto ist ungefähr 3MB groß
	32603*200*3 = 19561800MB ~= 19103GB ~= 18,7TB

	Insgesamt werden 4.5 + 18.7 = 23.2TB an Fotos täglich in Heidelberg fotografiert


b)	Mit Hilfe von Wikipedia: Fermi-Problem

	    Bevöklerung Deutschland: 81 292 688 (2016)
	    Im Durchschnitt gibt es 2 Personen pro Haushalt
	    Anzahl Klavier: "In Deutschlands Wohnzimmern stehen rund 1,5 Millionen Exemplare." (2012)
	    81 292 688 / 1 500 000 ~= 54 Menschen für jeden Klavier in Deutschland
	    In einem von 54/2 = 27 Haushalten gibt es ein Klavier 

	    Die Einwohner der Stadt Heidelberg sind 156 267 (12/2015)
	    Haushalte: 156 267/2 ~= 78134
	    78134/27 ~= 2894 Klavier, die normalerweise gestimmt werden müssen

	    Ein Klavierstimmer arbeitet normalerweise 8 Stunden * 5 Tagen/Woche * 32.6 Wochen/Jahr = 1304 Stunden pro Jahr
	    Es dauert etwa 60 Minuten, um ein Klavier zu stimmen + 30 Minuten Fahrzeit (nur im Rahmen Heidelbergs) = 90 Minuten
	    1304 / 1.5 ~= 869 Klaviere kann ein Klavierstimmer pro Jahr stimmen
	    2894 Klavier in HD / 869 ~= 3 Klavierstimmer muss es in Heidelberg geben


c)
	Wie lange dauert es, das Monitorbild aufzubauen?
        
	    Angenommen wir haben einen Monitor mit 1600x1200 Pixeln und das Bild hat ebenfalls 1600X1200 Pixel, angenommen es handelt 
	    sich um ein 24 Bit Bild und ...

	Wie lange dauert ein Bootprozess? (mit Hilfe von: http://www.thegeekstuff.com/2011/02/Linux-boot-process/)

	    Angenommen der Bootprozess beinhaltet folgende Schritte:
            Bios, MBR, Grub, Kernel, Init, Runlevel
            Bios -> sucht und lädt Bootloader und führt ihn aus 		3 Zwischenschritte (?)
            MBR	 -> lädt Grub und führt ihn aus					2 Zwischenschritte (?)
            GRUB -> lädt Kernel, lädt initrd images, führt diese aus		4 Zwischenschritte (?)
	    Kernel -> bindet das root file system ein 					2 ?
	   	   -> führt /sbin/init aus 						2 ?
	    Init -> schlägt in /etc/inittab Runlevel nach				1 ?
    		 -> wählt default initlevel aus						1 ?
		 -> führt default run level aus						1 ?
	    Runlevel Programme werden gestartet					       10 ?   

	Angenommen man braucht für jeden Zwischenschritt eine Rechenoperation (?), 
	dann wären das 3+2+4+2+2+1+1+1+10 = 26 Operationen x 1 s = 26 Sekunden 

6)

	a) Wert: 3 		Typ: int
	b) Wert: 6561		Typ: int
	c) Wert: 8748.0		Typ: float
	d) Wert: 15309.0	Typ: float
	e) Wert: True		Typ: bool

7)
	a) 0.2+0.1 = 0.30000000000000004
	b) 0.2+0.2 = 0.4
	c) 0.2+0.3 = 0.5
	d) 0.2+0.4 = 0.6000000000000001
	e) 0.2+0.5 = 0.7
	f) 0.2 * 2 = 0.4
	g) 0.2 * 3 = 0.6000000000000001
	h) 0.2 * 4 = 0.8
	i) 0.2 * 5 = 1.0
	j) 0.2 * 6 = 1.2000000000000002

	Q: Wie erkären Sie sich die Ergebnisse, die nicht der Schulmathematik zu entsprechen scheinen? 
	A: Der Grund hierfür ist, dass die Werte der Brüche in binärer Form abgelegt werden. Die meisten Brüche lassen sich 
	in binärer Form nicht exakt darstellen und können nur näherungsweise abgebildet werden. Das führt dazu, dass die 
	verwendeten Dezimalbrüche als die am nächsten am Wert des Dezimalbruchs liegenden angenäherten/gerundeten binäre Brüche 
	gespeichert werden. Es wird also die dem Dezimalbruch am nächsten liegende Annäherung des Binärbruchs dargestellt. 
	Da dies zum Teil mehr Nachkommastellen umfassen würde als die meisten Menschen als praktisch empfinden, stellt Python 
	stattdessen einen übersichtlichen gerundeten Wert dar. 

	Für die Floats 0.2, 0.4, 0.6 lässt sich das so veranschaulichen:
		1: Fraction.from_float()
		2: ().as_integer_ratio()
		3: Decimal.from_float()

	0.2
		1: 3602879701896397/18014398509481984
		2: (3602879701896397, 18014398509481984)
		3: 0.200000000000000011102230246251565404236316680908203125

	0.4
		1: 3602879701896397/9007199254740992
		2: (3602879701896397, 9007199254740992)
		3: 0.40000000000000002220446049250313080847263336181640625

	0.6
		1: 5404319552844595/9007199254740992
		2: (5404319552844595, 9007199254740992)
		3: 0.59999999999999997779553950749686919152736663818359375

	Statt den Dezimalwert aus 3 anzuzeigen, was in der Tat unübersichtlich wäre, rundet Python den Wert auf 17 signifikante Stellen.

	
	Q: Wie erreichen Sie, dass Sie Fließkommazahlen korrekt auf Gleichheit prüfen können?
	A: Mit der round() Funktion:	z.B  round(0.4+0.2, 1)==0.6 ergibt True



